import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable TelegramQt 1.0 $HOME/Qt/5.9.2/gcc_64/qml'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "AccountSecretHelper"
        prototype: "QObject"
        exports: ["TelegramQt/AccountSecretHelper 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Format"
            values: {
                "FormatBinary": 0,
                "FormatHex": 1
            }
        }
        Property { name: "accountDataExists"; type: "bool"; isReadonly: true }
        Property { name: "directory"; type: "string" }
        Property { name: "account"; type: "string" }
        Property { name: "accounts"; type: "QStringList"; isReadonly: true }
        Property { name: "format"; type: "Format" }
        Signal {
            name: "credentialDataExistsChanged"
            Parameter { name: "exist"; type: "bool" }
        }
        Signal {
            name: "directoryChanged"
            Parameter { name: "newDirectory"; type: "string" }
        }
        Signal {
            name: "accountChanged"
            Parameter { name: "account"; type: "string" }
        }
        Signal {
            name: "accountsChanged"
            Parameter { name: "accounts"; type: "QStringList" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "newFormat"; type: "Format" }
        }
        Method {
            name: "setDirectory"
            Parameter { name: "newDirectory"; type: "string" }
        }
        Method {
            name: "setAccount"
            Parameter { name: "newAccount"; type: "string" }
        }
        Method {
            name: "setFormat"
            Parameter { name: "newFormat"; type: "Format" }
        }
        Method {
            name: "saveCredentialsData"
            type: "bool"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method { name: "removeCredentialsData"; type: "bool" }
    }
    Component {
        name: "CAppInformation"
        prototype: "QObject"
        exports: ["TelegramQt/AppInformation 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "appId"; type: "uint" }
        Property { name: "appHash"; type: "string" }
        Property { name: "appVersion"; type: "string" }
        Property { name: "deviceInfo"; type: "string" }
        Property { name: "osInfo"; type: "string" }
        Property { name: "languageCode"; type: "string" }
    }
    Component {
        name: "CTelegramCore"
        prototype: "QObject"
        exports: ["TelegramQt/TelegramCore 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "connectionSecretData"; type: "QByteArray"; isReadonly: true }
        Property { name: "updatesEnabled"; type: "bool" }
        Property { name: "applicationInformation"; type: "CAppInformation"; isPointer: true }
        Property {
            name: "connectionState"
            type: "TelegramNamespace::ConnectionState"
            isReadonly: true
        }
        Signal {
            name: "connectionStateChanged"
            Parameter { name: "state"; type: "TelegramNamespace::ConnectionState" }
        }
        Signal {
            name: "selfUserAvailable"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal {
            name: "userInfoReceived"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal { name: "phoneCodeRequired" }
        Signal {
            name: "loggedOut"
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "authSignErrorReceived"
            Parameter { name: "errorCode"; type: "TelegramNamespace::AuthSignError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal { name: "contactListChanged" }
        Signal {
            name: "dialogsChanged"
            Parameter { name: "added"; type: "QVector<Telegram::Peer>" }
            Parameter { name: "removed"; type: "QVector<Telegram::Peer>" }
        }
        Signal {
            name: "contactProfileChanged"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal {
            name: "phoneStatusReceived"
            Parameter { name: "phone"; type: "string" }
            Parameter { name: "registered"; type: "bool" }
        }
        Signal {
            name: "passwordInfoReceived"
            Parameter { name: "requestId"; type: "qulonglong" }
        }
        Signal {
            name: "avatarReceived"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "avatarToken"; type: "string" }
        }
        Signal {
            name: "messageMediaDataReceived"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "type"; type: "TelegramNamespace::MessageType" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "size"; type: "uint" }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "Telegram::Message" }
        }
        Signal {
            name: "contactStatusChanged"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "status"; type: "TelegramNamespace::ContactStatus" }
        }
        Signal {
            name: "contactMessageActionChanged"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Signal {
            name: "contactChatMessageActionChanged"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Signal {
            name: "sentMessageIdReceived"
            Parameter { name: "randomId"; type: "qulonglong" }
            Parameter { name: "resolvedId"; type: "uint" }
        }
        Signal {
            name: "messageReadInbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageReadOutbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "peerAdded"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Signal {
            name: "createdChatIdReceived"
            Parameter { name: "randomId"; type: "qulonglong" }
            Parameter { name: "resolvedId"; type: "uint" }
        }
        Signal {
            name: "chatAdded"
            Parameter { name: "chatId"; type: "uint" }
        }
        Signal {
            name: "chatChanged"
            Parameter { name: "chatId"; type: "uint" }
        }
        Signal {
            name: "authorizationErrorReceived"
            Parameter { name: "errorCode"; type: "TelegramNamespace::UnauthorizedError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "userNameStatusUpdated"
            Parameter { name: "userName"; type: "string" }
            Parameter { name: "status"; type: "TelegramNamespace::UserNameStatus" }
        }
        Signal {
            name: "filePartReceived"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "totalSize"; type: "uint" }
        }
        Signal {
            name: "filePartUploaded"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "totalSize"; type: "uint" }
        }
        Signal {
            name: "fileRequestFinished"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "requestResult"; type: "Telegram::RemoteFile" }
        }
        Method {
            name: "setMessageReceivingFilter"
            Parameter { name: "flags"; type: "TelegramNamespace::MessageFlags" }
        }
        Method {
            name: "setAcceptableMessageTypes"
            Parameter { name: "types"; type: "TelegramNamespace::MessageTypeFlags" }
        }
        Method {
            name: "setAutoReconnection"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setUpdatesEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setPingInterval"
            Parameter { name: "interval"; type: "uint" }
            Parameter { name: "serverDisconnectionAdditionalTime"; type: "uint" }
        }
        Method {
            name: "setPingInterval"
            Parameter { name: "interval"; type: "uint" }
        }
        Method {
            name: "setMediaDataBufferSize"
            Parameter { name: "size"; type: "uint" }
        }
        Method { name: "connectToServer"; type: "bool" }
        Method { name: "disconnectFromServer" }
        Method {
            name: "setServerPublicRsaKey"
            type: "bool"
            Parameter { name: "key"; type: "Telegram::RsaKey" }
        }
        Method {
            name: "setServerConfiguration"
            type: "bool"
            Parameter { name: "dcs"; type: "QVector<Telegram::DcOption>" }
        }
        Method { name: "resetServerConfiguration"; type: "bool" }
        Method { name: "resetConnectionData" }
        Method {
            name: "setSecretInfo"
            type: "bool"
            Parameter { name: "secret"; type: "QByteArray" }
        }
        Method { name: "logOut"; type: "bool" }
        Method {
            name: "requestPhoneStatus"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "requestPhoneCode"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "requestAuthCode"
            type: "bool"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method { name: "getPassword"; type: "qulonglong" }
        Method {
            name: "tryPassword"
            Parameter { name: "salt"; type: "QByteArray" }
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "tryPassword"
            Parameter { name: "salt"; type: "QByteArray" }
            Parameter { name: "password"; type: "QByteArray" }
        }
        Method {
            name: "tryPassword"
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "signIn"
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "authCode"; type: "string" }
        }
        Method {
            name: "signUp"
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "authCode"; type: "string" }
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "addContact"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "addContacts"
            Parameter { name: "phoneNumbers"; type: "QStringList" }
        }
        Method {
            name: "deleteContact"
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "deleteContacts"
            Parameter { name: "userIds"; type: "QVector<quint32>" }
        }
        Method {
            name: "requestFile"
            type: "uint"
            Parameter { name: "file"; type: "const Telegram::RemoteFile"; isPointer: true }
        }
        Method {
            name: "requestHistory"
            type: "bool"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "limit"; type: "int" }
        }
        Method {
            name: "resolveUsername"
            type: "uint"
            Parameter { name: "userName"; type: "string" }
        }
        Method {
            name: "uploadFile"
            type: "uint"
            Parameter { name: "fileContent"; type: "QByteArray" }
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "uploadFile"
            type: "uint"
            Parameter { name: "source"; type: "QIODevice"; isPointer: true }
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "sendMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "sendMedia"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageInfo"; type: "Telegram::MessageMediaInfo" }
        }
        Method {
            name: "forwardMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setTyping"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Method {
            name: "setMessageRead"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setOnlineStatus"
            Parameter { name: "onlineStatus"; type: "bool" }
        }
        Method {
            name: "checkUserName"
            Parameter { name: "userName"; type: "string" }
        }
        Method {
            name: "setUserName"
            Parameter { name: "newUserName"; type: "string" }
        }
        Method {
            name: "createChat"
            type: "qulonglong"
            Parameter { name: "userIds"; type: "QVector<quint32>" }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "addChatUser"
            type: "bool"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "forwardMessages"; type: "uint" }
        }
        Method {
            name: "addChatUser"
            type: "bool"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "sendChatMessage"
            type: "qulonglong"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setChatTyping"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Method {
            name: "setChatMessageRead"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "initConnection"
            type: "bool"
            Parameter { name: "dcs"; type: "QVector<Telegram::DcOption>" }
        }
        Method { name: "initConnection"; type: "bool" }
        Method {
            name: "restoreConnection"
            type: "bool"
            Parameter { name: "secret"; type: "QByteArray" }
        }
        Method { name: "closeConnection" }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "CAppInformation"; isPointer: true }
        }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "const CAppInformation"; isPointer: true }
        }
        Method { name: "defaultServerConfiguration"; type: "QVector<Telegram::DcOption>" }
        Method { name: "defaultPingInterval"; type: "uint" }
        Method { name: "defaultServerPublicRsaKey"; type: "Telegram::RsaKey" }
        Method { name: "serverPublicRsaKey"; type: "Telegram::RsaKey" }
        Method { name: "serverConfiguration"; type: "QVector<Telegram::DcOption>" }
        Method { name: "connectionState"; type: "TelegramNamespace::ConnectionState" }
        Method { name: "selfPhone"; type: "string" }
        Method { name: "selfId"; type: "uint" }
        Method { name: "maxMessageId"; type: "uint" }
        Method { name: "contactList"; type: "QVector<quint32>" }
        Method { name: "dialogs"; type: "QVector<Telegram::Peer>" }
        Method {
            name: "peerPictureToken"
            type: "string"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "size"; type: "Telegram::PeerPictureSize" }
        }
        Method {
            name: "peerPictureToken"
            type: "string"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Method { name: "getPasswordData"; type: "Telegram::PasswordInfo" }
        Method { name: "builtInDcs"; type: "QVector<Telegram::DcOption>" }
        Method { name: "dcConfiguration"; type: "QVector<Telegram::DcOption>" }
        Method { name: "chatList"; type: "QVector<quint32>" }
        Method {
            name: "chatTitle"
            type: "string"
            Parameter { name: "chatId"; type: "uint" }
        }
        Method {
            name: "contactAvatarToken"
            type: "string"
            Parameter { name: "userId"; type: "uint" }
        }
    }
    Component {
        name: "MessageModel"
        prototype: "QObject"
        exports: ["TelegramQt/MessageModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MessageType"
            values: {
                "MessageTypeText": 0,
                "MessageTypePhoto": 1,
                "MessageTypeAudio": 2,
                "MessageTypeVideo": 3,
                "MessageTypeContact": 4,
                "MessageTypeDocument": 5,
                "MessageTypeGeo": 6,
                "MessageTypeWebPage": 7,
                "MessageTypeNewDay": 8,
                "MessageTypeServiceAction": 9
            }
        }
        Property { name: "peer"; type: "Telegram::Peer" }
        Signal {
            name: "peerChanged"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Method {
            name: "setPeer"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
    }
    Component {
        name: "MessageSender"
        prototype: "QObject"
        exports: ["TelegramQt/MessageSender 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "Telegram::Peer" }
        Signal {
            name: "peerChanged"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Signal {
            name: "messageSent"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setGeoPoint"
            Parameter { name: "latitude"; type: "double" }
            Parameter { name: "longitude"; type: "double" }
        }
        Method { name: "setContact" }
        Method { name: "setMedia" }
        Method { name: "setWebUrl" }
        Method { name: "setSticker" }
        Method { name: "sendMessage" }
    }
    Component {
        name: "Telegram::Client::AccountStorage"
        prototype: "QObject"
        exports: ["TelegramQt/AccountStorage 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "saveData"; type: "bool" }
        Method { name: "loadData"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::DeclarativeAuthOperation"
        prototype: "Telegram::Client::DeclarativeOperation"
        exports: ["TelegramQt/AuthOperation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthStatus"
            values: {
                "Idle": 0,
                "Connecting": 1,
                "Handshake": 2,
                "Phone": 3,
                "AuthCodeRequired": 4,
                "PasswordRequired": 5,
                "SignedIn": 6
            }
        }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "passwordHint"; type: "string"; isReadonly: true }
        Property { name: "hasRecovery"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "AuthStatus"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Signal {
            name: "busyChanged"
            Parameter { name: "busy"; type: "bool" }
        }
        Signal {
            name: "passwordHintChanged"
            Parameter { name: "hint"; type: "string" }
        }
        Signal { name: "phoneNumberRequired" }
        Signal { name: "authCodeRequired" }
        Signal { name: "passwordRequired" }
        Signal { name: "passwordCheckFailed" }
        Signal { name: "invalid" }
        Signal {
            name: "statusChanged"
            Parameter { name: "newStatus"; type: "AuthStatus" }
        }
        Signal {
            name: "authSignErrorReceived"
            Parameter { name: "errorCode"; type: "TelegramNamespace::AuthSignError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "authorizationErrorReceived"
            Parameter { name: "errorCode"; type: "TelegramNamespace::UnauthorizedError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "abort" }
        Method {
            name: "submitAuthCode"
            type: "bool"
            Parameter { name: "code"; type: "string" }
        }
        Method {
            name: "submitPassword"
            type: "bool"
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "setPhoneNumber"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method { name: "recovery"; type: "bool" }
        Method { name: "requestCall"; type: "bool" }
        Method { name: "requestSms"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::DeclarativeClient"
        prototype: "QObject"
        exports: ["TelegramQt/Client 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "applicationInformation"; type: "CAppInformation"; isPointer: true }
        Property { name: "signedIn"; type: "bool"; isReadonly: true }
        Property { name: "settings"; type: "Telegram::Client::DeclarativeSettings"; isPointer: true }
        Property { name: "accountStorage"; type: "Telegram::Client::AccountStorage"; isPointer: true }
        Property { name: "dataStorage"; type: "QObject"; isPointer: true }
        Signal {
            name: "signedInChanged"
            Parameter { name: "signedIn"; type: "bool" }
        }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "CAppInformation"; isPointer: true }
        }
        Method {
            name: "setSettings"
            Parameter { name: "settings"; type: "DeclarativeSettings"; isPointer: true }
        }
        Method {
            name: "setAccountStorage"
            Parameter { name: "storage"; type: "AccountStorage"; isPointer: true }
        }
        Method { name: "syncSettings" }
    }
    Component {
        name: "Telegram::Client::DeclarativeOperation"
        prototype: "QObject"
        Property { name: "target"; type: "Telegram::Client::DeclarativeClient"; isPointer: true }
        Property { name: "succeed"; type: "bool"; isReadonly: true }
        Signal {
            name: "succeedChanged"
            Parameter { name: "succeed"; type: "bool" }
        }
        Signal { name: "started" }
        Signal { name: "finished" }
        Signal { name: "succeeded" }
        Signal {
            name: "failed"
            Parameter { name: "details"; type: "QVariantHash" }
        }
        Method { name: "start" }
        Method {
            name: "setTarget"
            Parameter { name: "target"; type: "DeclarativeClient"; isPointer: true }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeProxySettings"
        prototype: "QObject"
        exports: ["TelegramQt/ProxySettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "port"; type: "int" }
        Property { name: "address"; type: "string" }
        Signal {
            name: "portChanged"
            Parameter { name: "newPort"; type: "ushort" }
        }
        Signal {
            name: "addressChanged"
            Parameter { name: "addressChanged"; type: "string" }
        }
        Method {
            name: "setPort"
            Parameter { name: "port"; type: "ushort" }
        }
        Method {
            name: "setAddress"
            Parameter { name: "address"; type: "string" }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeRsaKey"
        prototype: "QObject"
        exports: ["TelegramQt/RsaKey 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileName"; type: "string" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "loadDefault"; type: "bool" }
        Signal {
            name: "fileNameChanged"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Signal {
            name: "loadDefaultChanged"
            Parameter { name: "loadDefault"; type: "bool" }
        }
        Method {
            name: "setFileName"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "setLoadDefault"
            Parameter { name: "loadDefault"; type: "bool" }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeServerOption"
        prototype: "QObject"
        exports: ["TelegramQt/ServerOption 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "address"; type: "string" }
        Property { name: "port"; type: "uint" }
    }
    Component {
        name: "Telegram::Client::DeclarativeSettings"
        prototype: "Telegram::Client::Settings"
        exports: ["TelegramQt/Settings 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "serverOptions"
            type: "Telegram::Client::DeclarativeServerOption"
            isList: true
            isReadonly: true
        }
        Property { name: "serverKey"; type: "Telegram::Client::DeclarativeRsaKey"; isPointer: true }
        Property {
            name: "proxy"
            type: "Telegram::Client::DeclarativeProxySettings"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "setServerKey"
            Parameter { name: "serverKey"; type: "DeclarativeRsaKey"; isPointer: true }
        }
    }
    Component {
        name: "Telegram::Client::FileAccountStorage"
        prototype: "Telegram::Client::AccountStorage"
        exports: ["TelegramQt/FileAccountStorage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileName"; type: "string" }
        Signal {
            name: "fileNameChanged"
            Parameter { name: "fileName"; type: "string" }
        }
        Method { name: "saveData"; type: "bool" }
        Method { name: "loadData"; type: "bool" }
        Method {
            name: "setFileName"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "Telegram::Client::Settings"
        prototype: "QObject"
        Property { name: "pingInterval"; type: "int" }
        Method { name: "defaultPingInterval"; type: "uint" }
        Method { name: "defaultServerConfiguration"; type: "QVector<DcOption>" }
    }
    Component {
        name: "TelegramNamespace"
        prototype: "QObject"
        exports: ["TelegramQt/Namespace 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactStatus"
            values: {
                "ContactStatusUnknown": 0,
                "ContactStatusOffline": 1,
                "ContactStatusOnline": 2
            }
        }
        Enum {
            name: "MessageFlag"
            values: {
                "MessageFlagNone": 0,
                "MessageFlagRead": 1,
                "MessageFlagOut": 2,
                "MessageFlagForwarded": 4,
                "MessageFlagIsReply": 8
            }
        }
        Enum {
            name: "MessageType"
            values: {
                "MessageTypeUnsupported": 0,
                "MessageTypeText": 1,
                "MessageTypePhoto": 2,
                "MessageTypeAudio": 4,
                "MessageTypeVideo": 8,
                "MessageTypeContact": 16,
                "MessageTypeDocument": 32,
                "MessageTypeGeo": 64,
                "MessageTypeWebPage": 128,
                "MessageTypeAll": 255
            }
        }
        Enum {
            name: "AuthSignError"
            values: {
                "AuthSignErrorUnknown": 0,
                "AuthSignErrorAppIdIsInvalid": 1,
                "AuthSignErrorPhoneNumberIsInvalid": 2,
                "AuthSignErrorPhoneNumberIsOccupied": 3,
                "AuthSignErrorPhoneNumberIsUnoccupied": 4,
                "AuthSignErrorPhoneCodeIsInvalid": 5,
                "AuthSignErrorPhoneCodeIsExpired": 6,
                "AuthSignErrorPasswordHashInvalid": 7,
                "AuthSignErrorFirstNameIsInvalid": 8,
                "AuthSignErrorLastNameIsInvalid": 9
            }
        }
        Enum {
            name: "UnauthorizedError"
            values: {
                "UnauthorizedUnknownError": 0,
                "UnauthorizedErrorKeyUnregistered": 1,
                "UnauthorizedErrorKeyInvalid": 2,
                "UnauthorizedErrorUserDeactivated": 3,
                "UnauthorizedErrorUserSessionRevoked": 4,
                "UnauthorizedErrorUserSessionExpired": 5,
                "UnauthorizedErrorActiveUserRequired": 6,
                "UnauthorizedErrorNeedPermanentKey": 7,
                "UnauthorizedSessionPasswordNeeded": 8
            }
        }
        Enum {
            name: "UserNameStatus"
            values: {
                "UserNameStatusUnknown": 0,
                "UserNameStatusIsInvalid": 1,
                "UserNameStatusIsOccupied": 2,
                "UserNameStatusIsNotModified": 3,
                "UserNameStatusCanBeUsed": 4,
                "UserNameStatusCanNotBeUsed": 5,
                "UserNameStatusResolved": 6,
                "UserNameStatusAccepted": 7
            }
        }
        Enum {
            name: "ConnectionState"
            values: {
                "ConnectionStateDisconnected": 0,
                "ConnectionStateConnecting": 1,
                "ConnectionStateConnected": 2,
                "ConnectionStateAuthRequired": 3,
                "ConnectionStateAuthenticated": 4,
                "ConnectionStateReady": 5
            }
        }
        Enum {
            name: "MessageAction"
            values: {
                "MessageActionNone": 0,
                "MessageActionTyping": 1,
                "MessageActionRecordVideo": 2,
                "MessageActionRecordAudio": 3,
                "MessageActionUploadVideo": 4,
                "MessageActionUploadAudio": 5,
                "MessageActionUploadPhoto": 6,
                "MessageActionUploadDocument": 7,
                "MessageActionGeoLocation": 8,
                "MessageActionChooseContact": 9
            }
        }
        Method { name: "emptyPeer"; type: "Telegram::Peer" }
        Method {
            name: "peerFromChatId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
        Method {
            name: "peerFromChannelId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
        Method {
            name: "peerFromUserId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
    }
}
